openapi: 3.0.0
info:
  title: banking API
  version: 1.0.0
servers:
- url: http://webservice_bankingapps.org
  description: web service 
paths:
  /battle/{battleId}:
    get:
      summary: Returns a battle by ID.
      tags:
        - battle
      parameters:
      - name: battleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Battle'
    put:
      summary: Update battle information
      tags:
        - battle
      parameters:
      - name: battleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Book data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Battle'
        required: true
      responses:
        "200":
          description: OK
    delete:
      summary: Delete a battle by ID.
      tags:
        - battle
      parameters:
      - name: battleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
  /battle/:
    post:
      summary: Create a new battle
      tags:
        - battle
      requestBody:
        description: battle data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Battle'
        required: true
      responses:
        "200":
          description: OK
  /login/{loginId}:
    get:
      summary: Returns a user by ID.
      tags:
        - login
      parameters:
      - name: loginId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
    put:
      summary: Update user information
      tags:
        - login
      parameters:
      - name: loginId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Login data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        "200":
          description: OK
    delete:
      summary: Delete a user by ID.
      tags:
        - login
      parameters:
      - name: loginId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
  /login/:
    post:
      summary: Create a new user
      tags:
        - login
      requestBody:
        description: user data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        "200":
          description: OK   
  /login/{accountId}:
    get:
      summary: Returns a account by ID.
      tags:
        - account
      parameters:
      - name: accountId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
    put:
      summary: Update account information
      tags:
        - account
      parameters:
      - name: accountId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Acccount data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        "200":
          description: OK
    delete:
      summary: Delete a account by ID.
      tags:
        - account
      parameters:
      - name: accountId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
  /account/:
    post:
      summary: Create a new account
      tags:
        - account
      requestBody:
        description: account data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        "200":
          description: OK              
  /customer/{customerId}:
    get:
      summary: Returns a customer by ID.
      tags:
        - customer
      parameters:
      - name: customerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    put:
      summary: Update customer information
      tags:
        - customer
      parameters:
      - name: customerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Customer data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "200":
          description: OK
    delete:
      summary: Delete a customer by ID.
      tags:
        - customer
      parameters:
      - name: customerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
  /customer/:
    post:
      summary: Create a new customer
      tags:
        - customer
      requestBody:
        description: customer data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "200":
          description: OK                
  /battle/{battleId}/house:
    post:
      summary: Create a house
      parameters:
      - name: battleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Book data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Battle'
        required: true
      responses:
        "200":
          description: OK
  /house/{houseId}:
    get:
      summary: Returns a house by ID.
      parameters:
      - name: houseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
    put:
      summary: Update house information
      parameters:
      - name: houseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Book data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/House'
        required: true
      responses:
        "200":
          description: OK
    delete:
      summary: Delete a house by ID.
      parameters:
      - name: houseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
  /house/:
    post:
      summary: Create a new book
      requestBody:
        description: Book data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/House'
        required: true
      responses:
        "200":
          description: OK
  /character/{characterId}:
    get:
      summary: Returns a character by ID.
      parameters:
      - name: characterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
    put:
      summary: Update character information
      parameters:
      - name: characterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Book data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
        required: true
      responses:
        "200":
          description: OK
    delete:
      summary: Delete a character by ID.
      parameters:
      - name: characterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
  /character/:
    post:
      summary: Create a new book
      requestBody:
        description: Book data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
        required: true
      responses:
        "200":
          description: OK
components:
  schemas:
    Battle:
      type: object
      properties:
        battleId:
          type: string
        battleName:
          type: string
        attackerKing:
          type: string
        defenderking:
          type: string
        attackerHouse:
          type: string
        participateHouse:
          type: string
        battleType:
          type: string
        year:
          type: string
        location:
          type: string
        region:
          type: string
      example:
        battleId: battle12
        battleName: Battle of Winterfell
        attackerKing: Balon/Euron Greyjoy
        defenderking: Robb Stark
        attackerHouse: Greyjoy
        defenderHouse: Stark
        battleType: ambush
        year: 299
        location: Winterfell
        region: The North
    Character:
      type: object
      properties:
        characterId:
          type: string
        name:
          type: string
        title:
          type: string
        male:
          type: string
        culture:
          type: string
        mother:
          type: string
        father:
          type: string
        house:
          type: string
        age:
          type: string
      example:
        characterId: character1651
        name: Daenerys Targaryen
        title: Andals
        male: 0
        culture: Valyrian
        house: House Targaryen
        age: 21
    House:
      type: object
      properties:
        houseId:
          type: string
        characterName:
          type: string
        houseName:
          type: string
        deathYear:
          type: string
        bookOfDeath:
          type: string
        gender:
          type: string
        nobility:
          type: string
        location:
          type: string
        battle:
          type: array
          items:
            $ref: '#/components/schemas/Battle'
        character:
          type: array
          items:
            $ref: '#/components/schemas/Character'
      example:
        houseId: house107
        characterName: Bran Stark
        houseName: House Stark
        gender: 1
        nobility: 1
        location: Winterfell
        battle:
        - battleId: battle12
          battleName: Battle of Winterfell
          attackerKing: Balon/Euron Greyjoy
          defenderking: Robb Stark
          attackerHouse: Greyjoy
          defenderHouse: Stark
          battleType: ambush
          year: 299
          location: Winterfell
          region: The North
        character:
        - characterId: character1651
          name: Daenerys Targaryen
          title: Andals
          male: 0
          culture: Valyrian
          house: House Targaryen
          age: 21
    Login:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        password:
          type: "string"
      xml:
        name: "Login"
      example:
       id: 1
       password: Nothing    
    Customer:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        customerName:
          type: "string"
        birthDate:
          type: "string"
          format: "date-time"
        status:
          type: "string"
          description: "Customer Status"
          enum:
          - "active"
          - "inactive"
        debtDate:
          type: "boolean"
          default: false   
      xml:
        name: "Customer" 
    Account:
      type: "object"
      properties:
        accountNumber:
          type: "integer"
          format: "int64"
        accountType:
          type: "string"
          description: "Account Type"
          enum:
          - "saving"
          - "checking"  
        balance:
          type: "number"
          format: "float"
        allowOverdraft:
          type: "boolean"  
        overdraft:
          type: "number"
          format: "float"
      xml:
        name: "Account"        
        

