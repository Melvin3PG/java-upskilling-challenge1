openapi: 3.0.3
# @nybalRG
info:
  title: First Banking REST API
  description: |
    Create an basic REST API with following requirements for each business domain.
    - Security
    - Customer
    - Account
  
  termsOfService: https://www.3pilarglobal.com/terms-and-conditions  
  contact:
    name: AnybalRG
    url: https://www.3pilarglobal.com
    email: anibal.ruiz@3pillarglobal.com
  version: 0.0.1
  
# List Servers
servers:
  - url: https://www.3pilarglobal.com/dev
    description: Developer Server
  - url: https://www.3pilarglobal.com/staging
    description: Staging Server
  - url: https://www.3pilarglobal.com
    description: Production Server
  - url: https://{site}.{domain}/{port}/{version}
    description: Specify Server Details
    variables:
      site:
        default: www.3pilarglobal
        description: Default site
      domain:
        enum:
          - "com"
          - "org"
          - "edu"
        default: "com"
      port:
        enum:
          - "8888"
          - "8500"
        default: "8888"
      version:
        default: v1

# Endpoints
paths:
  # --//***** LogiSecurity Domain *****//
  # Create, Login, Logout Users
  # Create User
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  # Login User
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  # Get User, Update, Delete by username
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
        tags:
          - user
        summary: Update user
        description: This can only be done by the logged in user.
        operationId: updateUser
        parameters:
          - name: username
            in: path
            description: name that need to be deleted
            required: true
            schema:
              type: string
        requestBody:
          description: Update an existent user in the store
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/User'
        responses:
          default:
            description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  # Logout User
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation

  # --//***** Customer Domain *****//
  
  # Create, Update, Delete Customer
  /customers:
    post:
        tags:
          - Customer
        summary: Create Customer
        description: Post Create a Customer
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  customers:
                    type: object
                    properties:
                      idNumber:
                        type: integer
                        example: 1005
                      customerName:
                        type: string
                        example: Anibal R.
                      birthDate:
                        type: string
                        format: date
                        example: 1981-09-22
                      active:
                        type: boolean
                      atDate:
                        type: boolean
                      bankAccount:
                        $ref: '#/components/schemas/BankAccount'
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    customerId:
                      type: integer
                      example: 325
          '204':
            description: Not content
    # List Customer
    get:
      tags:
        - Customer
      summary: List all Customer
      description: Return the List all Customer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customers'
        '204':
          description: Not content
        '404':
          description: Customer Not found
  /cutomers/{idNumber}:
    put:
      tags:
        - Customer
      summary: Update Customer
      description: PUT Update a Customer
      operationId: updateCustomer
      parameters:
        - name: idNumber
          in: path
          description: idNumber that need to be deleted
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                customerId:
                  type: integer
                  example: 325
                customers:
                  type: object
                  properties:
                    idNumber:
                      type: integer
                      example: 1005
                    customerName:
                      type: string
                      example: Anibal R.
                    birthDate:
                      type: string
                      format: date
                      example: 1981-09-22
                    active:
                      type: boolean
                    atDate:
                      type: boolean
                    bankAccount:
                      $ref: '#/components/schemas/BankAccount'
      responses:
        '200':
          description: OK
        '204':
          description: Not content
        '409':
          description: Conflict
    delete:
      tags:
        - Customer
      summary: Delete Customer
      description: Delete a Customer
      operationId: deleteCustomer
      parameters:
        - name: idNumber
          in: path
          description: idNumber that need to be deleted
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Customer Delete Successfully
        '404':
          description: Customer Not Found
  # Customer By idNumber
  /customers/{idNumber}:
    # Customer by idNumber
    get:
      tags:
        - Customer
      summary: Find Customer by IdNumber
      description: Return Customer by IdNumber
      parameters:
        - name: idNumber
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          example: 1001
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerId'
        '400':
          description: Not content
        '404':
          description: Customer Not found
  # Customer By Banking Account
  /customers/findByBankingAccount:
    get:
      tags:
        - Customer
      summary: Finds Customer by BankingAccount
      operationId: findCustomersByBankingAccount
      parameters:
        - name: status
          in: query
          description: BankingAccount values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: Salary account
            enum:
              - Savings account
              - Salary account
              - Fixed deposit account
              - Recurring deposit account
              - NRI accounts
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customers'
        '400':
          description: Not content
        '404':
          description: Customer Not found
          
  # --//***** Account Domain *****//
  # Create, Update, Delete Account
  /accounts:
    post:
      tags:
        - Account
      summary: Create Account
      description: Post Create a Account Customer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                accounts:
                  type: object
                  properties:
                    accountNumber:
                      type: integer
                      example: 10001
                    accountType:
                      $ref: '#/components/schemas/AccountType'
                    balancce:
                      type: number
                      example: 5359.12
                    overdrafts:
                      type: boolean
                    overdraftAmount:
                      type: number
                      example: 123.01
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  accountId:
                    type: integer
                    example: 3251
        '204':
          description: Not content
    # List Account
    get:
      tags:
        - Account
      summary: List all Account
      description: Return the List all Account
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accounts'
        '204':
          description: Not content
        '404':
          description: Customer Not found
  /accounts/{idAccount}:
    put:
      tags:
        - Account
      summary: Update Account Customer
      description: PUT Update a Account Customer
      parameters:
        - name: idAccount
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          example: 3251
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                accountId:
                  type: integer
                  example: 3251
                account:
                  type: object
                  properties:
                    accountNumber:
                      type: integer
                      example: 10001
                    accountType:
                      $ref: '#/components/schemas/AccountType'
                    balancce:
                      type: number
                      example: 5359.12
                    overdrafts:
                      type: boolean
                    overdraftAmount:
                      type: number
                      example: 123.01
      responses:
        '200':
          description: OK
        '204':
          description: Not content
        '409':
          description: Conflict
    delete:
      tags:
        - Account
      summary: Delete Account Customer
      description: Delete a Account Customer
      parameters:
        - name: idAccount
          in: path
          required: true
          schema:
            type: integer
            example: 3251
      responses:
        '204':
          description: Account Delete Successfully
        '404':
          description: Account Not Found
  # Customer By idNumber
  /account/{idAccount}:
    # Account by idAccount
    get:
      tags:
        - Account
      summary: Find Account by IdAccount
      description: Return Account by IdAccount
      parameters:
        - name: idAccount
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          example: 3251
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountId'
        '400':
          description: Not content
        '404':
          description: Customer Not found
  # Customer By Banking Account
  /account/findByAccountType:
    get:
      tags:
        - Account
      summary: Finds by Account Type
      operationId: findCustomersByAccountType
      parameters:
        - name: status
          in: query
          description: AccountType values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: SAVING
            enum:
              - SAVING
              - CHEKING
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accounts'
        '400':
          description: Not content
        '404':
          description: Customer Not found

# Component
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: testing
        firstName:
          type: string
          example: Anybal
        lastName:
          type: string
          example: RG
        email:
          type: string
          example: anibal.ruiz@3pillarglobal.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '6444'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Customers:
      type: array
      items:
        properties:
          idNumber:
            type: integer
          customerName:
            type: string
          birthDate:
            type: string
            format: date
          active:
            type: boolean
          atDate:
            type: boolean
          bankAccount:
            $ref: '#/components/schemas/BankAccount'
      example:
        - idNumber: 1001
          customerName: Anybal
          birthDate: 1981-09-22
          active: true
          atDate: true
          bankAccount: Salary account
        - idNumber: 1002
          customerName: customer_1002
          birthDate: 1981-09-22
          active: true
          atDate: true
          bankAccount: Salary account
        - idNumber: 1003
          customerName: customer_1003
          birthDate: 1981-09-22
          active: true
          atDate: true
          bankAccount: Salary account
    CustomerId:
      properties:
        idNumber:
          type: integer
          example: 1001
        customerName:
          type: string
          example: Anybal
        birthDate:
          type: string
          format: date
          example: 1981-09-22
        active:
          type: boolean
          example: true
        atDate:
          type: boolean
          example: true
        bankAccount:
          $ref: '#/components/schemas/BankAccount'
    BankAccount:
      type: array
      items:
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
      example:
        - id: 1
          bankAccount: Salary account
        - id: 2
          bankAccount: Savings account
      xml:
        name: bankAccount
    AccountType:
      type: string
      default: SAVING
      enum:
        - SAVING
        - CHEKING
    Accounts:
      type: array
      items:
        properties:
          accountNumber:
            type: integer
            example: 10001
          accountType:
            $ref: '#/components/schemas/AccountType'
          balancce:
            type: number
            example: 5359.12
          overdrafts:
            type: boolean
          overdraftAmount:
            type: number
            example: 123.01
      example:
        - accountNumber: 10001
          accountType: SAVING
          balancce: 5359.12
          overdrafts: true
          overdraftAmount: 1243.01
        - accountNumber: 10002
          accountType: SAVING
          balancce: 535.11
          overdrafts: true
          overdraftAmount: 100.11
        - accountNumber: 10003
          accountType: SAVING
          balancce: 5124.36
          overdrafts: true
          overdraftAmount: 47.12
    AccountId:
      properties:
        accountNumber:
          type: integer
          example: 1001
        accountType:
          $ref: '#/components/schemas/AccountType'
        balancce:
          type: number
          example: 5359.12
        overdrafts:
          type: boolean
        overdraftAmount:
          type: number
          example: 123.01