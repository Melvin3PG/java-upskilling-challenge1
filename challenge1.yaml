openapi: 3.0.3
info:
  title: MyBank REST API
  description: |-
    This is a **Banking REST API**, this API includes three domains, Security Domain, Customer Domain and Account Domain, its design it's based on the Open Api Specification 3.0.
  contact:
    email: aline.perez@3pillarglobal.com
  license:
    name: MyBank License
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://mybank/api/v1
tags:
  - name: login
    description: Authentication resources
  - name: customers
    description: CRUD Catalog to manage customer information
  - name: accounts
    description: CRUD Catalog to manage account information
paths:
### Security domain ###
  # Authentication service validation for username and password
  /login:
    post:
      tags:
        - login
      summary: Authentication service validation for username and password
      description: Login service with user and password
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description:  Successful Login. Valid user and password
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/GeneralResponse'
                  - type: object
                    properties:
                      lastLogin:
                        description: Last login
                        type: string
                        format: date
                        example: 27-08-22
        '401':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
### Customer domain ###
  # Creates a new customer
  /customers:
    post:
      tags:
        - customers
      summary: Resource in charge of customer creation
      description: Create a new customer
      operationId: createCustomer
      security:
      - BasicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/customer'
        '400':
          $ref: '#/components/responses/error'
          
        '500':
          $ref: '#/components/responses/error'
    get:
      tags:
        - customers
      summary: Resource that retrieves all customers
      description: Create a new customer
      operationId: getAllCustumers
      security:
      - BasicAuth: []
      responses:
        '201':
          $ref: '#/components/responses/customer'
        '400':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
 
  /customers/{customerId}:
  # Modify a customer
    put:
      tags: 
        - customers
      summary: Resource that modifies customer data
      description: Update customer details
      operationId: updateCustomer
      security:
      - BasicAuth: []
      parameters:
        - $ref: '#/components/parameters/customerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/customer'
        '400':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
  # Retreives a custumer by ID
    get:
      tags:
        - customers
      summary: Resource that retrieves a customer by ID
      description: Find customer by ID
      operationId: getCustomerById
      security:
      - BasicAuth: []
      parameters:
        - $ref: '#/components/parameters/customerId'
      responses:
        '200':
          $ref: '#/components/responses/customer'
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error'
    # Delete a customer by ID      
    delete:
      tags:
        - customers
      summary: Resource that delete customer by ID
      description: Delete customer by ID
      operationId: deleteCustomer
      security:
      - BasicAuth: []
      parameters:
        - $ref: '#/components/parameters/customerId'
      responses:
        '204':
          description: Customer was deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error'
### Account domain ###
  # Create new account
  /accounts: 
    post:
      tags: 
        - accounts
      summary: Resource in charge of account creation
      description: Add a new account
      operationId: createAccount
      security:
      - BasicAuth: []
      requestBody:
        description: Create a new account for a client
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/account'
        '400':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
    # Get all accounts
    get:
      tags:
        - accounts
      summary: Resource that retrieves all accounts
      description: Find all accounts
      operationId: getAllAccounts
      security:
      - BasicAuth: []
      responses:
        '200':
          $ref: '#/components/responses/account'
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error' 
  /accounts/{accountNumber}:
  # Modify an account
    put:
      tags: 
        - accounts
      summary: Resource that modifies account data
      description: Update account details
      operationId: updateAccount
      security:
      - BasicAuth: []
      parameters:
        - $ref: '#/components/parameters/accountNumber'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/account'
        '400':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
  # Retreives an account by account number
    get:
      tags:
        - accounts
      summary: Resource that retrieves an account by account number
      description: Find account by account number
      operationId: getAccountByAccountNumber
      security:
      - BasicAuth: []
      parameters:
        - $ref: '#/components/parameters/accountNumber'
      responses:
        '200':
          $ref: '#/components/responses/account'       
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error'  
    # Delete an account by account number   
    delete:
      tags:
        - accounts
      summary: Resource that delete account by account number
      description: Delete account by account number
      operationId: deleteAccount
      security:
      - BasicAuth: []
      parameters:
        - $ref: '#/components/parameters/accountNumber'
      responses:
        '204':
          description: Customer was deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error'
components:
### Parameters ###
  parameters:
    # Account number
    accountNumber:
      name: accountNumber
      in: path
      description: Account identifier
      required: true
      schema:
        type: integer
        format: int64
    # Customer identifier
    customerId:
      name: customerId
      in: path
      description: Customer identifier
      required: true
      schema:
        type: integer
        format: int64
### Schemas ###
  schemas:
    # schema - User object
    User:
      type: object
      properties:
        username:
          type: string
          description: User name for login
          minLength: 10
          example: A45TR67YZ0
        password:
          type: string
          description: Password needed for login
          format: password
          minLength: 10
          example: w#CDfr546#@
    # schema - Customer object
    Customer:
     type: object
     properties:
      custumerName:
        type: string
        example: Daniel Sanchez
      birthDate:
        type: string
        format: date
        example: 15-10-1990
      active:
        type: boolean
        example: true
      atDate:
        type: boolean
        example: false
      bankingAccounts:
        type: array
        items:
           $ref: '#/components/schemas/Account'
    # schema - Account object
    Account:
     type: object
     properties:
      accountNumber:
       type: integer
       format: int64
       example: 2546132012563
      accountType:
       type: string
       description: Account type (two options)
       example: Saving
       enum:
        - saving
        - checking
      balance:
       type: number
       format: float
       example: 15300.25
      overdraftAllowed: 
       type: boolean
       description: Flag to show if account allows overdrafts 
       example: true
      overdraftAmount: 
       type: number
       format: float
       example: 5633.99
    # schema - API Responses <<General>>
    GeneralResponse:
      description: General response to be used for other responses
      type: object
      properties:
        messageCode:
          type: string
          example: C101
        messageDescription:
          type: string
          example: Message Description
    # schema - 4xx && 5xx responses
    OnErrorResponse:
      description: Response returned when an error occurred
      type: object
      properties:
        messageCode:
          type: string
          example: E144
        messageDescription:
          type: string
          example: Error Message Description
        errorType:
          type: string
          description: Error type for internal use
          example: An specific error type
### Responses ###
  responses:
    # 5xx && 4xx response code
    error:
        description: An error ocurred
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnErrorResponse'
    # Customer response (retrieving the whole object)
    customer:
      description: Operation was executed successfully
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/GeneralResponse'
              - type: object
                properties:
                  objectContent:
                    description: Customers array
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
    # Account response (retrieving the whole object)
    account:
      description: Operation was executed successfully
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/GeneralResponse'
              - type: object
                properties:
                  objectContent:
                    description: Accounts array
                    type: array
                    items:
                      $ref: '#/components/schemas/Account'
### Security ###
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic