openapi: 3.0.3
info:
  title: Swagger Banking API - OpenAPI 3.0
  description: |-
    This is a sample First Banking Rest API Server based on the OpenAPI 3.0 specification. 
    
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://banking.restapi.com/api/v3
tags:
  - name: security
    description: Authentication service validation for username and password
  - name: customers
    description:  Catalog to manage customer information
  - name: accounts
    description:  Catalog to manage account information
paths:
  /security/login:
    post:
      tags:
        - security
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        description: Login to the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse' 
        '400':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'   
  /customers:
    get:
      tags:
        - customers
      summary: Retrieve complete customer list
      operationId: getCustomerList
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
                
    post:
      tags:
        - customers
      summary: Create customer
      description: This can only be done by the logged in user.
      operationId: createCustomer
      requestBody:
        description: Created customer object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'          
        '400':
          description: Invalid account supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'  

  /customers/{custId}:
    get:
      tags:
        - customers
      summary: Find a customer by ID
      operationId: getCustomerById
      parameters:
        - name: custId
          in: path
          description: ID of customer that needs to be fetched
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'          
        '400':
          description: Invalid customer ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'          
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'                  
    put:
      tags:
        - customers
      summary: Update customer
      description: This can only be done by the logged in user.
      operationId: updateCustomer
      parameters:
        - name: custId
          in: path
          description: Customer ID that need to be update
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent customer in the bank
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'          
        '400':
          description: Invalid customer ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'          
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'          
    delete:
      tags:
        - customers
      summary: Delete a customer by ID
      operationId: deleteCustomer
      parameters:
        - name: custId
          in: path
          description: ID of the customer that needs to be deleted
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'          
        '400':
          description: Invalid customer ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'          
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'  

  /accounts:
    get:
      tags:
        - accounts
      summary: Retrieve complete account list 
      description: '' 
      operationId: getAccountList
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'   
    post:
      tags:
        - accounts
      summary: Create account
      description: This can only be done by the logged in user.
      operationId: createAccount
      requestBody:
        description: Created account object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'          
        '400':
          description: Invalid account supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'   

  /accounts/{accountNum}:
    get:
      tags:
        - accounts
      summary: Get account by account number
      description: ''
      operationId: getAccountByaccountNum
      parameters:
        - name: accountNum
          in: path
          description: 'The account number that needs to be fetched.'
          required: true
          schema:
            type: string

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'          
        '400':
          description: Invalid account supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'          
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'                    
    put:
      tags:
        - accounts
      summary: Update account
      description: This can only be done by the logged in user.
      operationId: updateAccount
      parameters:
        - name: accountNum
          in: path
          description: account number that need to be update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent account in the bank
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'          
        '400':
          description: Invalid account supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'          
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'          
    delete:
      tags:
        - accounts
      summary: Delete account
      description: This can only be done by the logged in user.
      operationId: deleteAccount
      parameters:
        - name: accountNum
          in: path
          description: The account number that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'          
        '400':
          description: Invalid account supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'          
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'  
                        
components:
  schemas:
    Customer:
      type: object
      properties:
        custId:
          type: integer
          format: int32
          example: 100000
        custName:
          type: string
          example: fehguy
        birthDate:
          type: string
          description: Birth date
          example: '2017-01-01'
          format: date
          pattern: "YYYY-MM-DD"
          minLength: 0
          maxLength: 10
        active:
          type: boolean
          example: true
        atDate:
          type: boolean
          example: true
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    
    Account:
      type: object
      properties:
        accountNum:
          type: string
          example: CR59623656510101065
          description: IBAN Account Number
        accountType:
          type: string
          description: Saving or Checking account
          enum:
            - SAVING
            - CHECKING
        balance:
          type: number
          example: 1365.6
        overdrafts:
          type: boolean
          example: false
          description: The account can to have overdrafs
        overdraftAmt:
          type: number
          example: 3658.8
          description: Amount overdrafting
    
    Login:
      type: object
      properties:
        user: 
          type: string
        password: 
          type: string
    
    User:
      type: object
      properties:
        user:
          type: string
          example: ARUIZ1
        name: 
          type: string
          example: Antonio
        lastName: 
          type: string
          example: Ruiz
    
    LoginResponse:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/ApiResponse'
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
    
    CustomerResponse:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/ApiResponse'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
    
    AccountResponse:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/ApiResponse'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        